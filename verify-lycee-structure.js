import { initializeApp } from 'firebase/app';
import { getFirestore, collection, getDocs, query, orderBy } from 'firebase/firestore';

const firebaseConfig = {
  apiKey: "AIzaSyBhp2UOv8m9y0ZW1XFRw4nBt-n-l9guedc",
  authDomain: "eduinfor-fff3d.firebaseapp.com",
  projectId: "eduinfor-fff3d",
  storageBucket: "eduinfor-fff3d.firebasestorage.app",
  messagingSenderId: "960025808439",
  appId: "1:960025808439:web:5aad744488b9a855da79b2"
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// Structure attendue
const expectedStructure = {
  branches: {
    'TC': ['SF', 'LSHF'],
    '1BAC': ['SCEX', 'LET', 'MATH'],
    '2BAC': ['MATH', 'PC', 'LET']
  },
  classesPerBranch: {
    'TC-SF': 6,
    'TC-LSHF': 2,
    '1BAC-SCEX': 2,
    '1BAC-LET': 2,
    '1BAC-MATH': 2,
    '2BAC-MATH': 2,
    '2BAC-PC': 2,
    '2BAC-LET': 2
  }
};

async function verifyStructure() {
  console.log('üîç V√âRIFICATION DE LA STRUCTURE DU LYC√âE\n');
  console.log('='.repeat(80) + '\n');
  
  try {
    // 1. V√©rifier les niveaux
    console.log('üìö √âTAPE 1: V√©rification des Niveaux');
    console.log('-'.repeat(80));
    const levelsSnapshot = await getDocs(query(collection(db, 'academicLevels'), orderBy('order')));
    const levels = levelsSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));
    
    console.log(`Niveaux trouv√©s: ${levels.length}/3`);
    const expectedLevels = ['TC', '1BAC', '2BAC'];
    levels.forEach(level => {
      const status = expectedLevels.includes(level.code) ? '‚úÖ' : '‚ö†Ô∏è';
      console.log(`${status} ${level.code}: ${level.nameFr} (${level.nameAr})`);
    });
    
    const missingLevels = expectedLevels.filter(code => 
      !levels.find(l => l.code === code)
    );
    if (missingLevels.length > 0) {
      console.log(`‚ùå Niveaux manquants: ${missingLevels.join(', ')}`);
    }
    console.log('');
    
    // 2. V√©rifier les fili√®res
    console.log('üåø √âTAPE 2: V√©rification des Fili√®res');
    console.log('-'.repeat(80));
    const branchesSnapshot = await getDocs(query(collection(db, 'branches'), orderBy('levelCode'), orderBy('order')));
    const branches = branchesSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));
    
    console.log(`Fili√®res trouv√©es: ${branches.length}/8\n`);
    
    for (const [levelCode, expectedBranchCodes] of Object.entries(expectedStructure.branches)) {
      const levelName = levels.find(l => l.code === levelCode)?.nameFr || levelCode;
      console.log(`üìå ${levelName} (${levelCode}):`);
      
      const levelBranches = branches.filter(b => b.levelCode === levelCode);
      console.log(`   Trouv√©es: ${levelBranches.length}/${expectedBranchCodes.length}`);
      
      expectedBranchCodes.forEach(code => {
        const branch = levelBranches.find(b => b.code === code);
        if (branch) {
          console.log(`   ‚úÖ ${code}: ${branch.nameFr} (${branch.nameAr})`);
        } else {
          console.log(`   ‚ùå MANQUANT: ${code}`);
        }
      });
      console.log('');
    }
    
    // 3. V√©rifier les classes
    console.log('üè´ √âTAPE 3: V√©rification des Classes');
    console.log('-'.repeat(80));
    const classesSnapshot = await getDocs(query(collection(db, 'classes'), orderBy('levelCode'), orderBy('branchCode'), orderBy('order')));
    const classes = classesSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));
    
    console.log(`Classes trouv√©es: ${classes.length}/22\n`);
    
    let totalExpected = 0;
    let totalFound = 0;
    const missingClasses = [];
    
    for (const [key, expectedCount] of Object.entries(expectedStructure.classesPerBranch)) {
      const [levelCode, branchCode] = key.split('-');
      const levelName = levels.find(l => l.code === levelCode)?.nameFr || levelCode;
      const branchName = branches.find(b => b.levelCode === levelCode && b.code === branchCode)?.nameFr || branchCode;
      
      const branchClasses = classes.filter(c => 
        c.levelCode === levelCode && c.branchCode === branchCode
      );
      
      totalExpected += expectedCount;
      totalFound += branchClasses.length;
      
      const status = branchClasses.length === expectedCount ? '‚úÖ' : '‚ö†Ô∏è';
      console.log(`${status} ${levelName} ‚Üí ${branchName}:`);
      console.log(`   Trouv√©es: ${branchClasses.length}/${expectedCount}`);
      
      if (branchClasses.length > 0) {
        branchClasses.forEach(cls => {
          const caseStatus = cls.levelCode === cls.levelCode.toUpperCase() ? '‚úÖ' : '‚ùå';
          console.log(`      ${caseStatus} ${cls.code}: ${cls.nameFr}`);
          if (cls.levelCode !== cls.levelCode.toUpperCase()) {
            console.log(`         ‚ö†Ô∏è  ATTENTION: levelCode en minuscules "${cls.levelCode}"`);
          }
        });
      }
      
      if (branchClasses.length < expectedCount) {
        const missing = expectedCount - branchClasses.length;
        console.log(`      ‚ùå ${missing} classe(s) manquante(s)`);
        for (let i = branchClasses.length + 1; i <= expectedCount; i++) {
          missingClasses.push(`${levelCode}-${branchCode}-${i}`);
        }
      }
      console.log('');
    }
    
    // 4. R√©sum√©
    console.log('='.repeat(80));
    console.log('üìä R√âSUM√â GLOBAL\n');
    
    const levelsOk = levels.length === 3;
    const branchesOk = branches.length === 8;
    const classesOk = classes.length === 22;
    
    console.log(`Niveaux:   ${levels.length}/3    ${levelsOk ? '‚úÖ' : '‚ùå'}`);
    console.log(`Fili√®res:  ${branches.length}/8    ${branchesOk ? '‚úÖ' : '‚ùå'}`);
    console.log(`Classes:   ${classes.length}/22   ${classesOk ? '‚úÖ' : '‚ùå'}`);
    console.log('');
    
    // 5. Probl√®mes de casse
    console.log('üîç V√âRIFICATION DE LA CASSE (MAJUSCULES/MINUSCULES)\n');
    const caseProblemClasses = classes.filter(c => c.levelCode !== c.levelCode.toUpperCase());
    if (caseProblemClasses.length > 0) {
      console.log(`‚ùå ${caseProblemClasses.length} classe(s) avec levelCode en minuscules:`);
      caseProblemClasses.forEach(cls => {
        console.log(`   ‚Ä¢ ${cls.code}: levelCode="${cls.levelCode}" (devrait √™tre "${cls.levelCode.toUpperCase()}")`);
      });
      console.log('\n‚ö†Ô∏è  CES CLASSES NE SERONT PAS VISIBLES DANS LE SIGNUP FORM!');
      console.log('üí° Solution: Supprimer et recr√©er ces classes via l\'admin panel\n');
    } else {
      console.log('‚úÖ Toutes les classes ont le bon format de levelCode\n');
    }
    
    // 6. Actions recommand√©es
    if (!levelsOk || !branchesOk || !classesOk || caseProblemClasses.length > 0) {
      console.log('üõ†Ô∏è  ACTIONS RECOMMAND√âES:\n');
      
      if (missingLevels.length > 0) {
        console.log('1. Cr√©er les niveaux manquants via l\'admin panel:');
        missingLevels.forEach(code => {
          console.log(`   - ${code}`);
        });
        console.log('');
      }
      
      if (branches.length < 8) {
        console.log('2. Cr√©er les fili√®res manquantes via l\'admin panel');
        console.log('   Voir STRUCTURE_LYCEE_COMPLETE.md pour les d√©tails\n');
      }
      
      if (classes.length < 22 || missingClasses.length > 0) {
        console.log('3. Cr√©er les classes manquantes:');
        console.log(`   Total manquant: ${22 - classes.length} classes`);
        if (missingClasses.length > 0 && missingClasses.length <= 10) {
          missingClasses.forEach(code => {
            console.log(`   - ${code}`);
          });
        }
        console.log('');
      }
      
      if (caseProblemClasses.length > 0) {
        console.log('4. PRIORIT√â: Corriger les classes avec mauvais levelCode:');
        caseProblemClasses.forEach(cls => {
          console.log(`   - Supprimer "${cls.code}" et le recr√©er`);
        });
        console.log('');
      }
    } else {
      console.log('üéâ STRUCTURE COMPL√àTE ET CORRECTE!\n');
      console.log('‚úÖ Vous pouvez maintenant:');
      console.log('   1. Tester le signup avec toutes les combinaisons');
      console.log('   2. Cr√©er des cours ciblant des classes sp√©cifiques');
      console.log('   3. Les √©tudiants peuvent s\'inscrire dans leur classe\n');
    }
    
    console.log('='.repeat(80));
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    process.exit(1);
  }
}

verifyStructure();
